import numpy as np

def rffur(CF, DT, NUM, RF, RFB, CR):
    AO = np.array([0.2893, 0.2518, 0.2311, 0.2119, 0.1790, 0.1794, 0.2187,
                0.2038, 0.1234, 0.0696, 0.0772, 0.0927, 0.0966, 0.0411,
                0.0465, 0.1398, 0.0741, 0.5120, 0.3653, 0.1982, 1.0, 0.2572])
    A1 = np.array([0.5579, 0.5260, 0.3129, 0.3720, 0.3038, 0.3176, 0.3820,
                0.5263, 0.4707, 0.3461, 0.2612, 0.3520, 0.2566, 0.2090,
                0.1535, 0.7415, 0.5722, 0.2513, 0.5668, 0.6222, 0.0, 1.6416])
    E = np.array([0.785, 0.703, 0.407, 0.472, 0.370, 0.387, 0.489, 0.661, 0.537,
                0.372, 0.283, 0.388, 0.284, 0.218, 0.161, 0.862, 0.618, 0.515,
                0.893, 0.776, 1.0, 2.210])
    X = np.array([3.0, 13.2, 17.1, 7.7, 0.0, 9.8, 0.0, 1.2, 10.2, 5.3, 3.7,
                1.4, 11.4, 7.5, 3.9, 0.0, 0.0, 3.6, 0.0, 0.5, 0.4, 0.1])

    Y0 = np.sum(AO * X)
    Y2 = np.sum(A1 * X / E * (1.0 - np.exp(-E * DT)))
    RF[0] = (Y0 + Y2) / DT * 0.01 * CF

    for J in range(2, NUM + 1):
        Y1 = np.sum(A1 * X / E * (1.0 - np.exp(-E * DT))**2 * np.exp(-(J - 2) * E * DT))
        Y3 = np.sum(A1 * X * (1.0 + (1.0 - np.exp(E * DT)) / (E * DT)) * np.exp(-(J - 1) * E * DT))
        RF[J - 1] = -Y1 * 0.01 / DT * CF
        RFB[J - 1] = Y3 * 0.01 * CF

    RF[1] = RF[1] - Y0 * 0.01 / DT * CF
    RFB[1] = RFB[1] - Y0 * 0.01 / DT * CF

    Y1 = np.sum(RF[:-1])
    Y2 = np.sum(RFB[:-1])
    CR = 1.0 + RF[-1] / Y1
    RFB[0] = -2.0 * (Y2 + RFB[-1] / (1.0 - CR))

